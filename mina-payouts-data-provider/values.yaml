# Default values for mina-payouts-data-provider.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

replicaCount: 1

image:
  repository: 673156464838.dkr.ecr.us-west-2.amazonaws.com/mina-payouts-data-provider
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: "2.3.0-9a10e51"

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

minaPayoutsDataProvider:
  numSlotsInEpoch: 7140
  archiveDBRecencyThreshold: 10
  ledgerUploadAPI:
    user: "ledger-upload-api-user"
    password: "ledger-upload-api-password"
  blockDBQuery:
    version: "v1"
    host: http://localhost
    port: 5432
    user: user
    password: password
    name: database
    ssl:
      enabled: false
      rootCertificate: ""
      # e.g.
      # rootCertificate: |
      #   -----BEGIN CERTIFICATE-----
      #   MIICmDCCAYACCQCfJWWkbDANBgkqhkiG9w0BAQsFADAQMQ4wDAYDVQQDDAVz
      #   ZXJ2aWNlMB4XDTE5MDYxNzA2Mzk1NFoXDTI5MDYxNDA2Mzk1NFowEDEOMAwG
      #   A1UEAwwFc2VydmljZTCBnzANBgkqhkiG9w0BAQEFAAOBjQAwgYkCgYEAw4tZ6c
      #   uE6rJ+CSQwXppsfueFW+nVf9x1yGvWeLdI2Ky8T3F4CRUJtK0LZq3qnSCsRbD
      #   ...
      #   UqH8rJvCD+1LlxvrbIXTjwq5
      #   -----END CERTIFICATE---
  ledgerDBQuery:
    host: http://localhost
    port: 5432
    user: user
    password: password
    name: database
    ssl:
      enabled: false
      rootCertificate: "" # Same as above
    bootstrap:
      enabled: false
      schemaURL: "https://raw.githubusercontent.com/jrwashburn/mina-payouts-data-provider/main/deploy/db-setup/stakesDb.sql"
      delay: 30 # seconds
      image:
        repository: "postgres"
        tag: "latest"
  ledgerDBCommand:
    host: http://localhost
    port: 5432
    user: user
    password: password
    name: database
    ssl:
      enabled: false
      rootCertificate: "" # Same as above
  checkNodes: []
  envVars: {}
    # - name: FOO
    #   value: FOO
    # - name: BAR
    #   valueFrom:
    #     secretKeyRef:
    #       name: mySecret
    #       key: bar  offline:

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

podAnnotations: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

service:
  type: ClusterIP
  port: 8080

ingress:
  enabled: false
  className: ""
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: chart-example.local
      paths:
        - path: /
          pathType: ImplementationSpecific
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

livenessProbe:
  httpGet:
    path: /health
    port: http
readinessProbe:
  httpGet:
    path: /health
    port: http

nodeSelector: {}

tolerations: []

affinity: {}

postgresql:
  create: false
  # Ref: https://raw.githubusercontent.com/bitnami/charts/main/bitnami/postgresql/values.yaml
